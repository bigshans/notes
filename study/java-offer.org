#+TITLE: 剑指 java 面试

* 网络基础

** OSI 七层架构

1. 物理层

   物理层保证，机器 A 向机器 B 传输比特流，将比特流转换为电信号，机器 B 收到又将
   电信号转换为比特流，就是所谓数模转换和模数转换。物理层就是负责数据的实际传输。
   物理层不保证数据可靠性。物理层规定各种网络设备的标准，如网线、网卡之类的。

2. 数据链路层

   数据链路层定义了如何格式化数据以进行传输，如何控制物理介质的访问。这层通常还
   提供错误检测和纠错，保证数据传输的可靠性。本层将比特数据组成为帧。交换机工作
   在此层，对帧解码，将数据发送给正确的接受放方。

3. 网络层

   网络层将网络地址翻译成对应的物理地址，并决定如何将数据从发送方路由到接受方。
   网络层综合考录数据的拥塞程度，以及可选路由的花费，来决定网络中节点 a 到网络中
   节点 b 的最优路径。路由器属于网络层。此层的数据为数据包，此层我们需要关注的协
   议是 IP 协议。

4. 传输层

   传输层解决主机间的数据传输问题，主机间的数据传输可以是不同网络的，并且解决了
   传输质量的问题。是 OSI 中最重要的一层。传输同时进行流量控制，或是根据接受发送
   快慢来控制速度快慢。这一层将数据进行切分，并将每一个数据片安排一个数据号，以
   便接受方的传输层能顺序重组。此层我们需要关注的协议是 TCP 和 UDP 协议。

5. 会话层

   会话层负责建立和管理应用程序之间的通讯。

6. 表示层

   解决不同1系统之间通讯语法的问题。

7. 应用层

   应用层规定消息的长度格式等。

** TCP 三次握手和四次挥手

*** TCP 简介

- 面向连接的、可靠的、基于字节流的传输层通信协议
- 将应用层的数据流分割成报文段并发送给目标节点的 TCP 层
- 数据包都有序号，对方收到则发送 ACK 确认，未收到则重传
- 使用校验和校验数据在传输过程中是否有误

*** TCP Flags

+ URG: 紧急指针标志
+ ACK: 确认序号标志
+ PSH: push 标志
+ RST: 重置连接标志
+ SYN: 同步序号，用于建立连接过程
+ FIN: finish 标志，用于释放连接

*** TCP 握手

- 服务端先建立 TCB ，进入 Listen 状态
- 客户端建立 TCB 向服务端发送请求
- 客户端发送 =SYN = 1, seq = x= ，x 为随机数，此时客户端进入 SYN-SEND
- 服务端收到之后，发回 =SYN = 1, ACK = 1, seq = y, ack = x + 1= ，此时服务端进入 SYN-RCVD
- 客户端发回 =ACK = 1, ack = y + 1, seq = x + 1= ，此时建立连接，双方进入 ESTAB-LISTENED

*** TCP 挥手

- 客户端发送 =FIN = 1，seq = u= ，u 为最后一次传输的序号，表示自己已经没有数据可以发送了，但仍然可以接受数据。发
  送完毕后，客户端进入 FIN_WAIT_1 状态
- 服务器确认，发送 =ACK  = 1, seq = v, ack = u + 1= ，进入 CLOSE_WAIT，表示自己
  接受到了客户端关闭连接的请求，但还没有准备好关闭连接
- 服务端准备好关闭连接时，向客户端发送 =FIN = 1, ACK = 1, seq = w, ack = u + 1=
  ，进入 LAST_ACK 状态，等待来自客户端的最后一个 ACK
- 客户端回发 =ACK = 1, ack = y + 1, seq = w + 1= ，客户端进入 TIME_WAIT，等待
  2msl (两个最大段生命周期), 服务端接收后立即进入 CLOSED 。

  为什么会有 TIME_WAIT 状态？
  1. 确保有足够时间让对方收到 ACK 包
  2. 避免新旧连接混淆
*** UDP 简介

- 面向非连接
- 不维护连接状态，支持同时向多个客户
  端传输相同信息
- 数据包报头只有 8 个字节，额外开销
  较小
- 吞吐量只受限与数据生成速率、传输速
  率以及机器性能
- 尽最大努力交付，不保证可靠交付，不
  需要维持复杂的链接状态表
- 面向报文，不对应用程序提交的报文信
  息进行拆分或者合并
 
*** TCP 的滑动窗口

- RTT: 发送一个数据包到收到对应的
  ACK , 所花费的时间
- RTO: 重传时间间隔
** HTTP

*** 特点

- 支持客户/服务器模式
- 简单快速
- 灵活
- 无连接
- 无状态
 
*** 请求/响应的步骤

+ 客户端连接到 Web 服务器
+ 发送 HTTP 请求
+ 服务器接受请求并返回 HTTP 响应
+ 释放连接 TCP 连接
+ 客户端浏览器解析 HTML 内容
