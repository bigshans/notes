#+TITLE: DOCKER study note

* Docker 是什么

  Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。

* Linux 容器

  Linux 容器不是一个完整的操作系统，而是对进程进行隔离。
  
  Linux 容器是进程级别的，相比虚拟机：
  1) 启动快。
  2) 资源占用少。
  3) 体积小。
* Docker 的用途
  1) 提供一次性的环境。
  2) 提供弹性的云服务。
  3) 组建微服务框架。
* images 查看
  Docker 把应用程序及其以来，打包在 image 文件里面。
  使用如下命令列出所有：
  #+begin_src shell
    docker image ls
  #+end_src
  查看镜像、容器、数据卷所占用的空间。
  #+begin_src shell
  docker system df
  #+end_src
** 虚悬镜像 
   删除虚悬镜像：
   #+begin_src shell
     docker image prune
   #+end_src
** 中间层镜像
   为了加速镜像构件、重复利用资源， docker 会利用中间层镜像。
   #+begin_src shell
   docker image ls -a
   #+end_src
   可以看到中间层镜像。
** 列出部分镜像
   #+begin_src shell
   docker image ls ubuntu
   #+end_src
   #+begin_src shell
   docker image ls ubuntu:18.04
   #+end_src
   #+begin_src shell
   docker image ls -f since=mongo:3.2
   #+end_src
   我们希望只希望看到在 mongo:3.2 之后建立的镜像。如果我们查找之前的，将 since 换成 before 即可。
   #+begin_src shell
   docker image ls -f label=com.exmpale.version=0.1
   #+end_src
   如果定义了 label 还可以通过 label 进行过滤。
** 以特定格式显示
   #+begin_src shell
   docker image ls -q
   #+end_src
   ~-q~ 只显示 id 。
   #+begin_src shell
   docker image ls --format "{{.ID}}: {{.Repository}}"
   #+end_src
   自定义格式，使用 Go 语言模板。
* 获取镜像：
  #+begin_src shell
    docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]
  #+end_src
  运行启动镜像：
  #+begin_src shell
    docker run -it --rm ubuntu:18.04 bash
  #+end_src
  各个参数的意思是：
    - ~--it~ ：这是两个参数，一个是 ~-i~ ：交互式操作，一个是 ~-t~ 终端。这里我们打算进入 bash 执行命令查看返回结果，因此我们需要交互式终端。
    - ~--rm~ ：这个参数是说容器退出之后随之将其删除。
    - ubuntu:18.04 ：这里指用 ubuntu:18.04 镜像为基础来启动容器。
    - bash ：放在镜像名后面的是命令。
  
* 删除镜像
  删除本地镜像：
  #+begin_src shell
    docker image rm [选项] <镜像1> [<镜像2>...]
  #+end_src
  我们可以用 ID、镜像名、摘要删除镜像。
  #+begin_src shell
    docker image rm 501
    docker image rm centos
    docker image ls --digests # 显示摘要
    docker image rm node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228
    Untagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228
  #+end_src
** Untagged 和 Deleted

   删除行为实际上分为两类，一类是 =Untagged= ，另一类是 =Deleted= 。我们之前介绍过，镜像唯一的标识是其 ID 和摘要，而一个镜像可以有多个标签。
   因此，当我们使用命令删除镜像的时候，实际上是在要求删除某个标签的镜像。所以首先需要做的是将满足我们要求的镜像标签都取消，当该镜像所有的标签都被取消了，该镜像失去了存在的意义，因此会出发删除行为。
   
** 用 docker images ls 命令来配合
   
   #+begin_src shell
   docker image rm $(docker images ls -q redis)
   #+end_src
* 利用 commit 理解镜像构成
  现在让我们以定制一个 Web 服务器为例子，来讲解镜像是如何构建的。
  #+begin_src shell
  docker run --name webserver -d -p 80:80 nginx
  #+end_src
  我们使用 ~docker exec~ 进入容器修改内容：
  #+begin_src shell
  docker exec -it webserver bash
  #+end_src
  我们修改了容器，可以通过 ~docker diff~ 查看：
  #+begin_src shell
  docker diff webbserver
  #+end_src
  ~docker commit~ 语法格式为：
  #+begin_src shell
  docker commit [选项] <容器 ID 或容器名> [<仓库名>[:<标签>]]
  #+end_src
  我们通过下面的命令将容器保存为镜像：
  #+begin_src shell
  docker commit \
    --author "Tao Wang <twang2218@gmail.com>" \
    --message "修改了默认网页" \
    webserver \
    nginx:v2
  #+end_src
  我们还可以用 ~docker history~ 具体查看镜像内的历史记录。
  #+begin_src shell
  docker history nginx:v2
  #+end_src

* 使用 Dockerfile 定制镜像
** FROM 指定基础镜像
   可以以已有镜像为基础，也可以以空白镜像为基础。
   #+begin_src dockerfile
   FROM scratch
   #+end_src
   ~RUN~ 指令是用来执行命令行命令的。其格式有两种：
     - shell 格式： ~RUN <命令>~ 。
       #+begin_src dockerfile
       RUN echo '<h1>Hello, Docker</h1>' > /usr/share/nginx/html/index.html
       #+end_src
     - exec 格式： ~RUN ["可执行文件", "参数"]~ 。
    每一层构建的最后一定要清理掉无关文件。
** 构建镜像
   在 dockerfile 文件所在目录执行：
   #+begin_src shell
   docker build -t nginx:v3 .
   #+end_src
   我们使用 ~docker build~ 命令进行镜像构建。其格式为：
   #+begin_src shell
   docker build [选项] <上下文路径/URL/->
   #+end_src`
** 镜像构建上下文
   指定的是上下文路径。
** 其它 docker build 的用法
   
