#+TITLE: Golang 笔记

* Golang 如何进行赋值？

** 赋值方式
*** 声明式赋值
#+begin_src go
var h int;
var b, a = 5, 6;
var k int = 5;
#+end_src
*** Pascal 式赋值
#+begin_src go
c := 7;
#+end_src
** 基础值的类型
*** 布尔 - =bool=
*** 字符串 - =string=
*** 数字
**** 整数
***** 有符号 - =int int8 int16 int32 int64=
***** 无符号 - =uint uint8 uint16 uint32 uint64=
***** 指针值 - =unitptr=
***** 字节 - =byte=， =uint8= 的别名
***** 符文 - =rune=， =int32= 的别名
**** 浮点数 - =float32 float64=
**** 复数 - =complex64 complex128=
** 类型转换 - 显式类型转换，不允许隐式转换
** 常量定义
#+begin_src go
const Word = "世界";
const (
	Big = 1 << 100
	Small = Big >> 99
)
#+end_src

* Golang 控制流

** 循环
*** =for=
**** while 式
***** 死循环
#+begin_src go
for {/* code statment */}
#+end_src
***** 条件循环
#+begin_src go
a := 0;
for a > 10 {
	a += 1;
}
#+end_src
**** step by step 式
#+begin_src go
for i := 0; i < 10; i += 1 {
	fmt.Println(i);
}
#+end_src
**** iterator 式
#+begin_src go
a := []string{};
a.append(a, "hello");
a.append(a, "word");
for _, aa := range a {
	fmt.Print(aa);
	fmt.Print(" ");
}
#+end_src
** 分支
*** =if=
#+begin_src go
x := 5;
if x > 4 {
	fmt.Println('big!');
}
#+end_src
可以在表达式执行前执行一个简单语句。
#+begin_src go
if x := 5; x > 4 {
	fmt.Println('big!');
}
#+end_src
*** =else=
#+begin_src go
if x := 5; x > 4 {
	fmt.Println('big!');
} else {
	fmt.Println('small!');
}
#+end_src
*** =switch=
**** 有条件的
#+begin_src go
switch i {
case 0:
case f():
}
#+end_src
**** 无条件的
#+begin_src go
t := time.Now()
switch {
case t.Hour() < 12:
    fmt.Println("Good morning!")
case t.Hour() < 17:
    fmt.Println("Good afternoon.")
default:
    fmt.Println("Good evening.")
}
#+end_src
**** fallthrough

继续执行语句。golang 中会自动终止执行。
** =defer=

=defer= 语句会将函数推迟到外层函数返回之后执行。

推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。

* Golang 函数

** 如何声明？

使用关键字 =func= 。

#+begin_src go
func add(x int, y int) int {
	return x + y
}
#+end_src

类型声明后置。函数可以没有参数或接收多个参数。

当连续两个或多个函数的已命名形参类型相同时，除最后一个类型以外，其他都可以忽略。

#+begin_src go
func add(x, y int) int {
	return x + y
}
#+end_src

** 多值返回

函数可以返回任意数量的返回值。

#+begin_src go
func swap(x, y string) (string, string) {
	return y, x
}
#+end_src

** 命名返回值

Go 的返回值可以被命名，它们会被是做定义在函数顶部的变量。

返回值的名称应当具有一定的意义，它可以作为文档使用。

没有参数的 =return= 语句返回已命名的返回值。也就是直接返回。

直接返回语句应当仅用在下面这样的短函数中。在长的函数中它们会影响代码的可读性。

#+begin_src go
func split(sum int) (x, y int) {
	x = sum * 4 / 9
	y = sum - x
	return
}
#+end_src

** 匿名函数

就是没有函数名的函数，可以实现闭包。

#+begin_src go
func adder() func(int) int {
	sum := 0
	return func(x int) int {
		sum += x
		return sum
	}
}
#+end_src

* Golang 复合结构的定义

** 定义

使用 =struct= 定义，一个结构体就是一组字段。

#+begin_src go
type Vertex struct {
	X int
	Y int
}
#+end_src

** 字段访问

使用 =.= 来访问。

#+begin_src go
package main

import "fmt"

type Vertex struct {
	X int
	Y int
}

func main() {
	v := Vertex{1, 2}
	v.X = 4
	fmt.Println(v.X)
}
#+end_src

#+RESULTS:
: 4

** 结构体文法

结构体文法通过直接列出字段的值来新分配一个结构体。

特殊前缀 =&= 返回一个纸箱结构体的指针。

#+begin_src go
package main

import "fmt"

type Vertex struct {
	X, Y int
}

var (
	v1 = Vertex{1, 2}  // 创建一个 Vertex 类型的结构体
	v2 = Vertex{X: 1}  // Y:0 被隐式地赋予
	v3 = Vertex{}      // X:0 Y:0
	p  = &Vertex{1, 2} // 创建一个 *Vertex 类型的结构体（指针）)
)

func main() {
	fmt.Println(v2, p, v2, v3)
}
#+end_src

#+RESULTS:
: {1 0} &{1 2} {1 0} {0 0}

** 映射的文法

映射的文法与结构体相似，不过必须有键名。

#+begin_src go
package main

import "fmt"

type Vertex struct {
	Lat, Long float64
}

var m = map[string]Vertex {
	"Bell Labs": Vertex {
		40.68433, -74.39967,
	},
	"Google": Vertex {
		37.42202, -122.08408,
	},
}

func main() {
	fmt.Println(m)
}
#+end_src

#+RESULTS:
: map[Bell Labs:{40.68433 -74.39967} Google:{37.42202 -122.08408}]

若顶级类型只是一个类型名，你可以在文法的元素中省略它。

#+begin_src go
package main

import "fmt"

type Vertex struct {
	Lat, Long float64
}

var m = map[string]Vertex {
	"Bell Labs": {
		40.68433, -74.39967,
	},
	"Google": {
		37.42202, -122.08408,
	},
}

func main() {
	fmt.Println(m)
}
#+end_src

#+RESULTS:
: map[Bell Labs:{40.68433 -74.39967} Google:{37.42202 -122.08408}]

* Golang 数组与切片

** 定义

类型 [n]T 表示拥有 n 个 T 类型的值的数组。

#+begin_src go
var a [10]int
#+end_src

数组长度是数组类型的一部分，所以不能改变数组的值。

#+begin_src go
package main

import "fmt"

func main() {
	var a [2]string
	a[0] = "Hello"
	a[1] = "World!"
	fmt.Println(a[0], a[1])
	fmt.Println(a)

	primes := [6]int{2, 3, 5, 7, 11, 13};
	fmt.Println(primes)
}
#+end_src

#+RESULTS:
: Hello World!
: [Hello World!]
: [2 3 5 7 11 13]

** 切片

*** 定义

类型 []T 表示一个元素类型为 T 的切片。

切片通过两个下标来界定，即一个上街一个下届，二者以冒号分隔：

#+begin_example go
a[low:high]
#+end_example

这是一个半开区间，即 [low,high) ，包含开头不包含结尾。

#+begin_src go
package main

import "fmt"

func main() {
	primes := [6]int{2, 3, 5, 7, 11, 13};

	var s []int = primes[1:4]
	fmt.Println(s)
}
#+end_src

#+RESULTS:
: [3 5 7]

切片就像数组的引用，修改切边的元素会修改其底层数组中对应的元素。其他切片也会观测到变更。

*** 切片文法

切片文法类似于没有长度的数组文法。

这是数组文法：

#+begin_src go
[3]bool{true, true, false}
#+end_src

这是切片文法，它构建了一个数组并引用了它的切片：

#+begin_src go
[]bool{true, true, false}
#+end_src

#+begin_src go
package main

import (
	"fmt"
)

func main() {
	q := []int{2, 3, 5, 7, 11, 13}
	fmt.Println(q)

	r := []bool{true, false, true, true, false, true}
	fmt.Println(r)

	s := []struct {
		i int
		b bool
	} {
		{2, true},
		{3, false},
		{4, true},
		{5, false},
		{6, true},
		{7, false},
		{8, true},
		{9, false},
	}
	fmt.Println(s)
}
#+end_src

#+RESULTS:
: [2 3 5 7 11 13]
: [true false true true false true]
: [{2 true} {3 false} {4 true} {5 false} {6 true} {7 false} {8 true} {9 false}]

*** 切片的默认行为

对于数组：

#+begin_src go
var a [10]int
#+end_src

一下切片是等价的：

#+begin_src go
a[0:10]
a[:10]
a[0:]
a[:]
#+end_src

*** 切片的长度和容量

切片拥有 *长度* 和 *容量* 。

切片的长度就是它所包含的元素个数。

切片的容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。

- len(s) 长度
- cap(s) 容量

#+begin_src go
package main

import (
	"fmt"
)

func printSlice(s []int) {
	fmt.Printf("len=%d cap=%d %v\n", len(s), cap(s), s)
}

func main() {
	s := []int{2, 3, 5,7, 11, 13}

	s = s[:0]
	printSlice(s)

	s = s[:4]
	printSlice(s)

	s = s[2:]
	printSlice(s)
}
#+end_src

#+RESULTS:
: len=0 cap=6 []
: len=4 cap=6 [2 3 5 7]
: len=2 cap=4 [5 7]

*** =nil= 切片

切片的零值是 =nil= 。

=nil= 切片的长度和容量为 0 且没有底层数组。

#+begin_src go
package main

import (
	"fmt"
)

func main() {
	var s[]int
	fmt.Println(s, len(s), cap(s))
	if s == nil {
		fmt.Println("nil!")
	}
}
#+end_src

#+RESULTS:
: [] 0 0
: nil!

*** 用 =make= 创建切片

切片可以用内建函数 =make= 来创建，这也是你创建动态数组的方式。

=make= 函数会分配一个元素为零值的数组并返回一个引用了它的切片：

#+begin_src go
a := make([]int, 5) // len(a) == 5
#+end_src

要指定它的容量，需要向 =make= 传入第三个参数：

#+begin_src go
b := make([]int, 0, 5) // len(b) == 0, cap(b) == 5

b = b[:cap(b)] // len(b) == 5, cap(b) == 5
b = b[1:] // len(b) == 4, cap(b) == 4
#+end_src

*** =append=

文法：
#+begin_example go
func append(s []t, vs ...T) []T
#+end_example

=append= 的第一个参数 =s= 是一个元素类型为 =T= 的切片，其余类型为 =T= 的值将会追加到切片的末尾。

=append= 的结果是一个包含原切片所有元素加上新添加元素的切片。

当 =s= 的底层数组太小，不足以容纳所有给定的值时，它就会分配一个更大的数组。返回的切片会指向这个新分配的数组。

#+begin_src go
package main

import "fmt"

func printSlice(s []int) {
	fmt.Printf("len=%d cap=%d %v\n", len(s), cap(s), s)
}

func main() {
	var s []int
	printSlice(s)

	s = append(s, 0)
	printSlice(s)

	s = append(s, 2, 3, 4)
	printSlice(s)
}
#+end_src

#+RESULTS:
: len=0 cap=0 []
: len=1 cap=1 [0]
: len=4 cap=4 [0 2 3 4]

*** Range

=for= 循环的 =range= 形式可遍历切片或映射。

当使用 =for= 循环遍历切片时，每次迭代都会返回两个值。第一个值为当前元素的下标，第二个值为该下标所对应元素的一份 *副本* 。

#+begin_src go
package main

import "fmt"

var pow = []int{1, 2, 4, 8, 32, 64, 128}

func main() {
	for i, v := range pow {
		fmt.Printf("2**%d = %d\n", i, v)
	}
}
#+end_src

#+RESULTS:
: 2**0 = 1
: 2**1 = 2
: 2**2 = 4
: 2**3 = 8
: 2**4 = 32
: 2**5 = 64
: 2**6 = 128

使用下标或值赋予 _ 来忽略它。

#+begin_example go
for i, _ := range pow
for _, value := range pow
#+end_example

若你只需要索引，忽略第二个变量即可。

#+begin_example go
for i := range pow
#+end_example

#+begin_src go
package main

import "fmt"

func main() {
	pow := make([]int, 10)
	for i := range pow {
		pow[i] = 1 << uint(i)
	}

	for _, value := range pow {
		fmt.Printf("%d\n", value)
	}
}
#+end_src

#+RESULTS:
#+begin_example
1
2
4
8
16
32
64
128
256
512
#+end_example

* Golang 的引用与指针

* Golang 的模块导入和导出

** 导入的两种语法
*** 单独导入 － `import "<package>"`
*** 分组导入
#+begin_src go
import (
    "fmt"
    "math"
)
#+end_src
** 导出方式：首字母大写
** 常用模块

- math/rand.Intn()

* Golang 的协程

** 什么是 channel？
** 何时切换？

* Golang 的 OO

** 封装
** 继承
** 多态
