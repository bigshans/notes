#+TITLE: rust 教程

* Rust 教程

一个幽灵，一个 Rust 的幽灵，在 Cpp 的上空游荡......咳咳，开玩笑。

Rust
是值得一学的语言，但它的学习难度也另人望而生畏。因为它的内容众多，概念复杂，我觉得我需要对这些内容做一个“手术”，使得我们能够先熟悉
Rust
，而后再去攻克难点，本篇也是按照这个顺序去推进的。我们不着手大项目，尽量从简单的代码入手去学习最最基础的代码。

** Hello World!
我假设你已经安装了 Rust ，我们首先来写一个编程的传统代码 Hello World 。

我建议代码都自己敲一遍。

#+begin_src rust
fn main() {
    println!("Hello World!");
}
#+end_src

我们运行 =rustc= 编译，运行之后会打印 =Hello World!= 。

这段代码我们可以知道东西：

- Rust 与 C 、 C++ 类似都有一个入口函数，并且都叫 =main= 。
- 函数的标识为 =fn=
  ，目前我们没有看到参数定义和返回值定义，所以一个纯空函数的定义是这样的。
- =println!= 用于换行打印，其实也有 =print!=
  ，它们实际上不是函数，这点与 C 、 C++ 类似。
- 目测字符串与字符的标识是双引号与单引号。

目前我们不能了解更多了，我们继续。

** 变量声明
#+begin_src rust
fn main() {
    let a = 123;
    println!("a: {}", a);
    let a = 134; // 直接 a = 134 错误
    println!("a: {}", a);
}
#+end_src

这段代码是最简单的变量声明，涉及到几个问题：

- 变量使用 =let= 声明，但是要改变变量的值，需要显示的使用 =let=
  改变，但是一定要这样做吗？

  #+begin_src rust
fn main() {
    let mut a = 123;
    println!("a: {}", a);
    a = 134; // 直接 a = 134 错误
    println!("a: {}", a);
}
  #+end_src

  使用 =let mut= 进行声明就没有问题了，其中 =mut= 是 mutable 的简写。

- =println!= 打印变量使用 ={}= 占位。

- 类型是可以隐式声明的，但变量类型在声明后固定，不存在隐式转换。

*** 变量与常量
#+begin_src rust
fn main() {
    const A:i32 = 123;
    println!("A: {}", A);
    let b = 134 + A;
    println!("b: {}", b);
}
#+end_src

#+RESULTS:
: A: 123
: b: 257

这段代码大家可以做几次尝试，比如将 =A= 改为 =a= ，去除 =A=
的类型声明，常量再赋值等。

- 常量名小写会有 WARN ，一般我们约定常量名大写。
- 常量类型必须显式声明。
- 常量只能声明一次，不像变量一样存在多次声明的可能。

** 数据类型
有一下基础类型：

- 整数
- 浮点数
- 布尔
- 字符
- 复合

*** 整数
整数按照位长度和有无符号分为 12 种。

| 位数     | 有符号 | 无符号 |
|----------+--------+--------|
| 8        | i8     | u8     |
| 16       | i16    | u16    |
| 32       | i32    | u32    |
| 64       | i64    | u64    |
| 128      | i128   | u128   |
| 平台相关 | isize  | usize  |

其中 =isze= 和 =usize= 一般用来衡量数据大小。

*** 浮点数
分为 32 位和 64 位：

- =f32=
- =f32=

*** 布尔
就是 =true= 或 =false=

*** 字符
=char= 。

*** 复合类型
这里讲元组和数组。

**** 元组
#+begin_src rust
fn main() {
    let tup: (i32, f64, u8) = (500, 6.4, 1);
    let (x, y, z) = tup;
    println!("{}, {}, {}", x, y, z);
}
#+end_src

#+RESULTS:
: 500, 6.4, 1

其中 =(i32, f64, u8)= 。

**** 数组
#+begin_src rust
fn main() {
    let arr: [i32; 5] = [1, 2, 3, 4, 5];
    println!("{}", arr[0]);
}
#+end_src

#+RESULTS:
: 1

其中 =[i32; 5]= 为数组类型的声明。

注意，你不能直接打印复合类型。

** 条件判断
Rust 的条件判断与其他语言基本一致，也是 =if= 、 =else if= 、 =else= 。

#+begin_src rust
fn main() {
    let number = 15;
    let b: i32;
    if number < 5 {
        b = 1;
    } else if number < 10 {
        b = 2;
    } else {
        b = 3;
    }
    println!("b: {}", b);
}
#+end_src

Rust 的条件判断可以省略括号，但是不能省略 ={}= ，在这一点上与 Golang
类似。显然，由于 Rust 不像 C/C++ 一样隐式类型转换，所以我们不能用 =0=
代表 =false= ， =1= 代表 =true= 。

除此之外， =Rust= 是没有三目运算符的，不过 =Rust= 提供了新的表达式形式。

#+begin_src rust
fn main() {
    let number = 15;
    let b: i32 = if number > 15 { 1 } else { 2 };
    println!("b: {}", b);
}
#+end_src

其中 ={}= 中的是我们的值，且 ={}= 不能省略。

** 函数声明
现在我们学习函数的声明，我们已经知道了其中一种函数的声明，但我们仍然需要更进一步的函数声明供我们学习。

*** 最基础的函数声明
#+begin_src rust
fn add(x: i32, y: i32) -> i32 {
    return x + y;
}
#+end_src

=fn= 是 function
单词的简写，参数声明的方式与变量声明的方式类似，不过这里使用 =->= 而不是
=:= 代表返回值，如果没有返回值则代表无返回值。

至此，我们目前的知识可以来写一个简单的斐波那契。

#+begin_src rust
fn fib(n: i64) -> i64 {
    return if n <= 2 { 1 } else { fib(n - 1) + fib(n - 2) };
}

fn main() {
    println!("fib: {}", fib(20));
}
#+end_src

*** 无 =return= 的返回
在 Rust 中，我们也可以不写 =return= ，比如：

#+begin_src rust
fn fib(n: i64) -> i64 {
    if n <= 2 { 1 } else { fib(n - 1) + fib(n - 2) }
}

fn main() {
    println!("fib: {}", fib(20));
}
#+end_src

#+RESULTS:
: fib: 6765

注意，返回的这一句之后不能再有语句，且这一句不以分号结尾。

*** 使用 ={}= 表达式
#+begin_src rust
fn main() {
    let x = 5;

    let y = {
        let x = 3;
        x + 1
    };

    println!("x: {}", x);
    println!("y: {}", y);
}
#+end_src

虽然 ={}= 里面最后的值也是不加分号，但是不能使用 =return= 。

** 循环判断
Rust 的循环有三个， =while= 、 =for= 和 =loop= 。

*** =while= 循环
#+begin_src rust
fn main() {
    let mut x = 1;
    while x < 5 {
        println!("x: {}", x);
        x += 1;
    }
}
#+end_src

Rust 中的 =while= 与其他语言差不多。虽然 Rust 的 do 是作为保留字，但是
Rust 并没有 do-while 语句。

*** =for= 循环
=for= 可用于迭代。

#+begin_src rust
fn main() {
    let a = [1, 2, 3, 4, 5];
    for x in 1..5 {
        println!("x: {}", x);
    }
    for x in a.iter() {
        println!("a: {}", x);
    }
}
#+end_src

其中 =1..5= 可以用以生成 1 、 2 、 3 、 4 、 5 的序列。

*** =loop= 循环
=loop= 是无限循环。

#+begin_src rust
fn main() {
    let a = [1, 2, 3, 4, 5];
    let mut i = 0;
    loop {
        if i >= 5 {
            break;
        }
        println!("x: {}", a[i]);
        i += 1;
    };
}
#+end_src

也是非常好用的语法了。

** 所有权
这里我们不得不涉及 Rust 里的内存概念：所有权。

所有权有三条基本概念：

1. Rust 中的每一个值都有一个被称为其 **所有者**（owner）的变量。
2. 值在任一时刻有且只有一个所有者。
3. 当所有者（变量）离开作用域，这个值将被丢弃。

先记住，我们以 =String= 作为例子。

*** 移动
#+begin_src rust
fn main() {
    let x1 = String::from("hello");
    // let x2 = x1;
    println!("{}", x1);
}
#+end_src

=String::from()=
为我们创建了一个在堆上的数据，但是当我们解除注释时，我们发现代码报错了，
rustc 提醒我们 "move occurs because =x1= has type =String=, which does
not implement the =Copy= trait" 。

这是怎么回事呢？

当我们令 =x2= = =x1= 时，一般的语言会选择将 =x1= 上的内容复制到 =x2=
上，从而使得 =x1= 、 =x2= 都指向同一个地址。当然，也可以选择将 =x1=
所指向的内容做一份复制，并用新的指针指向新的内容并赋值给 =x2=
，但明显地，这很耗费性能。不过 Rust 是怎么做的呢？

我们需要先回忆一下所有权的三个概念。当我们令 =x2= = =x1= 时，显然 =x1=
是实际上是一个指针，那么 =x1= 赋值 =x2= 时就是指针，于是 =x1= 和 =x2=
都指向了同一块数据，此刻，同一块数据有两个所有者，于是与所有权 1 、 2
条发生相悖， Rust 这时候就选择了取消 =x1= 的所有权，并把它的所有权转交给
=x2= 。

也就是说， =x2= = =x1= 在 Rust 里就是真正意义上的转移， =x1= 数据转移到
=x2= 上， =x1= 进而失效。

实际上，这个报错主要是因为我们使用了一个无效变量导致的，当我们使用 =x2=
时就不会有这个问题。

#+begin_src rust
fn main() {
    let x1 = String::from("hello");
    let x2 = x1;
    println!("{}", x2);
}
#+end_src

**** 参数转移
#+begin_src rust
fn printStr(x: String) {
    println!("{}", x);
}

fn main() {
    let x1 = String::from("hello");
    printStr(x1);
    println!("{}", x1);
}
#+end_src

我们运行以上代码会发现我们遇到与之前一样的错，这是因为当我们调用
=printStr()= 时， =x1= 的所有权就转移给 =printStr()= 的 =x=
上了，当函数结束时， =x= 离开了作用域，根据第三条原则，值被丢弃。

那我们应该如何处理呢？

#+begin_src rust
fn main() {
    let s1 = String::from("hello");

    let (s1, len) = calculate_length(s1);

    println!("The length of '{}' is {}.", s1, len);
}

fn calculate_length(s: String) -> (String, usize) {
    let length = s.len(); // len() 返回字符串的长度

    (s, length)
}
#+end_src

我们使用元组可以返回数据，顺便把需要的参数传出来。但这么写起来未免太麻烦了。

**** 引用与借用
为了解决上面的麻烦， Rust 引入了引用。

我们将上面的代码改写为引用版本。

#+begin_src rust
fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("The length of '{}' is {}.", s1, len);
}

fn calculate_length(s: &String) -> usize {
    s.len()
}
#+end_src

使用引用，我们就将变量引入到作用域内来，但离开作用域的时候，值也不会被丢弃，在
Rust 里，我们使用 *借用* （borrowing） 这个词来描述此种行为。
值得注意的是，引用默认与赋值的情况一样，是不可更改的，比如像下面的代码，是不可以被编译通过的。

#+begin_src rust
fn main() {
    let s = String::from("hello");

    change(&s);
}

fn change(some_string: &String) {
    some_string.push_str(", world");
}
#+end_src

但如果我们确实需要改变所指向的值该怎么办呢？与赋值一样使用 =mut=
。我们稍加改造，上面的代码就可以通过了。

#+begin_src rust
fn main() {
    let mut s = String::from("hello");

    change(&mut s);
}

fn change(some_string: &mut String) {
    some_string.push_str(", world");
}
#+end_src

我们称呼为可变引用。

但引用的使用也有限制，总的遵循一下两条规则：

#+begin_src rust
- 在任意给定时间，要么**只能有一个可变引用**，要么**只能有多个不可变引用**。
    - 引用必须总是有效的。
#+end_src

*** 克隆与基础数据类型
有些时候我们实际上是需要一份一模一样的新数据作为我们的值，我们可以使用
=clone()= 方法来了解决这个问题。

#+begin_src rust
fn main() {
    let s1 = String::from("hello");
    let s2 = s1.clone();

    println!("s1 = {}, s2 = {}", s1, s2);
}
#+end_src

另外，基础数据类型是直接使用克隆而不是像对象一样使用移动的。

#+begin_src rust
fn main() {
    let x = 5;
    let y = x;

    println!("x = {}, y = {}", x, y);
}
#+end_src

** 切片
切片就是对一段连续数据序列的引用，这个引用是不可变引用。

#+begin_src rust
fn main() {
    let s = String::from("Hello, World!");
    let part1 = &s[0..6];
    let part2 = &s[6..13];
    println!("{}={}+{}", s, part1, part2);
}
#+end_src

=..= 我们在循环章节看过， =0..6= 代表一个 \(0 \le i < 6\) 区间的切片。
除此之外， =..= 还有其他的状态。

- `..y` 等价于 `0..y` 。
- `x..` 等价于从 x 开始到结束。
- `..` 等价于全部的数据。

另外，我们说过，切片是不可变引用，因此我们不能改变切片的值。

#+begin_src rust
fn main() {
    let mut s = String::from("Hello, World");
    let slice = &s[0..6];
    s.push_str("Jack!"); // 错误
    println!("slice = {}", slice);
}
#+end_src

另外，还有一个有趣的问题不知道你有没有发现。我们一直在使用 =String=
而不是直接使用字符串，这是为什么呢？

如果我们直接使用字符串，我们实际上使用的是 =&str=
，换而言之，就是引用。而 =String= 就是对 =&str= 的包装。裸用 =&str=
其实是既不方便又不安全的，所以我们使用 =String=
。不过，我们可以使用切片进行非常简单的转换。

#+begin_src rust
fn main() {
    let s1 = String::from("hello");
    let s2 = &1[..];
    println!("{}", s2);
}
#+end_src

当然，我们说切片适用于*连续序列*，所以也不止于字符串。

#+begin_src
  fn main() {
      let arr = [1, 2, 3, 4, 5, 6];
      let part = &arr[0..3];
      for i in part.iter() {
          println!("{}", i);
      }
  }
#+end_src

** 结构体
Rust 结构体的定义使用 =struct= 关键字。

#+begin_src rust
struct User {
    username: String,
    email: String,
    sign_in_count: u64,
    active: bool,
}
#+end_src

定义结构体后，我们就可以创建一个结构体了。

#+begin_src rust
let user1 = User {
    email: String::from("hello@exmaple.com"),
    username: String::from("user"),
    active: true,
    sign_in_count: 1,
};
#+end_src

Rust 创建结构体的方法其实与 JS 创建对象的方法类似，熟悉 JS
的方法应该很熟悉。

Rust 还可以这样创建。

#+begin_src rust
fn build_user(email: String, username: String) -> String {
    User {
        email,
        username,
        active: true,
        sign_in_count: 1,
    }
}
#+end_src

结构体也可以使用别的结构体进行创建。

#+begin_src rust
fn main() {
    struct User {
        username: String,
        email: String,
        sign_in_count: u64,
        active: bool,
    }

    let user1 = User {
        email: String::from("someone@src.com"),
        username: String::from("someusername123"),
        active: true,
        sign_in_count: 1,
    };

    let user2 = User {
        active: user1.active,
        username: user1.username,
        email: String::from("another@src.com"),
        sign_in_count: user1.sign_in_count,
    };
}
#+end_src

我们也可以使用 =..= 来指定剩余为显示设置的字段。

#+begin_src
  let user2 = User {
      email: String::from("another@src.com"),
      ..user1
  }
#+end_src

一定需要注意的是，当我们这样使用的时候，就相当于我们在调用 ===
，我们的值将会发生移动，在上面的例子里，我们将不能再使用 =user1= 。

**** 元组结构体
#+begin_src rust
struct Color(i32, i32, i32);
let black = Color(0, 0, 0);
#+end_src

** 结构体方法拓展

rust 结构体可以拓展方法，使得 rust 可以更加面向对象。

rust 可以有静态方法和非静态方法。

#+begin_src rust
struct MyStruct {}

impl MyStruct {
    // static method
    fn static_method() {
        // code define
    }
    // unstatic method
    fn method(&self) {
        // code define
    }
}
#+end_src

** 枚举
我们使用 =enum= 来定义枚举，例如

#+begin_src rust
enum IpAddrKind {
    V4,
    V6,
}
#+end_src

其中 =IpAddrKind= 为我们定义的枚举， =V4= 、 =V6= 为枚举的成员。

这是一个非常简单的创建，我们也可以简单创建一个实例。

#+begin_src
  let four = IpAddrKind::V4;
  let six = IpAddrKind::V6;
#+end_src

但光是这样有时候对我们来说并不太够，我们可以将它与实际上的数据进行绑定。

#+begin_src rust
enum IdAddr {
    V4(u8, u8, u8, u8),
    V6(String),
}

let home = IpAddrKind::V4(127, 0, 0, 1);
let loopback = IpAddr:V6(String::from("::1"));
#+end_src

事实上，你会问这样定义枚举又什么意义？ Rust 中的枚举其实是为了 =match=
控制准备的。

** =match= 模式匹配
Rust 有一个叫做 match
的极为强大的控制流运算符，它允许我们将一个值与一系列的模式相比较，并根据相匹配的模式执行相应代码。模式可由字面值、变量、通配符和许多其他内容构成。match
的力量来源于模式的表现力以及编译器检查，它确保了所有可能的情况都得到处理。我们目前讲得比较简单。

#+begin_src rust
fn main() {
    enum Coin {
        Penny,
        Nickel,
        Dime,
        Quarter,
    }

    fn value_in_cents(coin: Coin) -> u8 {
        match coin {
            Coin::Penny => 1,
            Coin::Nickel => 5,
            Coin::Dime => 10,
            Coin::Quarter => 25,
        }
    }
}
#+end_src

结构上似乎与我们常见的 =switch= 非常相似，但 =match= 比 =switch=
要强大得多。

我们还可以对它进行值匹配。

#+begin_src rust
fn main() {
    let book = 1;
    match book {
        1 => {
            println!("{}", book);
        },
        _ => {
            println!("fuck!");
        }
    }
}
#+end_src

=_= 在次是用来兜底的，相当于 =default= ， Rust
会穷尽所有的模式，如果又代码没有处理完成就会报错。

** =Option=
=Option= 是 Rust 标准库里的一个枚举。它的定义如下：

#+begin_src rust
enum Option<T> {
    Some(T),
    None,
}
#+end_src

你不需要显示引入它。这里 Rust 用到了泛型。

=None= 意味着无， =Some= 意味着被保存的非空数据。

我们结合 =Option= 和 =match= 一起写个程序。

#+begin_src rust
fn plus_one(x: Option<i32>) -> Option<i32> {
    match x {
        None => None,
        Some(i) => Some(i + 1),
    }
}

fn main() {
    let five = Some(5);
    let six = plus_one(five);
    let none = plus_one(None);
    println!("{} {:?}", six.unwrap(), none);
}
#+end_src

** =if let= 简单控制流
=if let= 语法让我们以一种不那么冗长的方式结合 =if= 和 =let=
，来处理只匹配一个模式的值而忽略其他模式的情况。考虑下面的例程，它匹配一个
=Option<u8>= 值并只希望当值为 3 时执行代码：

#+begin_src rust
fn main() {
    let some_u8_value = Some(0u8);
    match some_u8_value {
        Some(3) => println!("three"),
        _ => (),
    }
}
#+end_src

但是 =- => ()= 为我们添加许多无用的代码，我们想要写的更简洁。

#+begin_src rust
fn main() {
    let some_u8_value = Some(0u8);
    if let Some(3) = some_u8_value {
        println!("three");
    }
}
#+end_src

如此我们省去了无用的分支，减少了模板代码的编写。同时我们也可以结合
=else= 来减少 =match= 的啰嗦。

#+begin_src rust
fn main() {
    enum UsState {
        Alabama,
        Alaska,
    }

    enum Coin {
        Penny,
        Nickel,
        Dime,
        Quarter(UsState),
    }
    let coin = Coin::Penny;
    let mut count = 0;
    if let Coin::Quarter(state) = coin {
        println!("State quarter from {:?}!", state);
    } else {
        count += 1;
    }
}
#+end_src

** Cargo 基础
Cargo 是 Rust 的构建系统和包管理器，我们一般用它来创建 Rust 工程，管理
Rust 依赖。

*** Cargo 基本功能
Cargo 可以完成从项目创建，到构建、运行等一系列工程。

#+begin_src shell
cargo new newproject # 创建项目
cd newproject
cargo build # 编译项目
cargo run # Hello, world!
#+end_src

在项目的目录下面有 =Cargo.toml= 文件和 =src=
目录，前者记录了项目的一些基本信息和项目的依赖，后者就是项目的 Rust
源码了。

*** 添加依赖

默认 Cargo 其实是不能添加依赖的，我们需要借助 cargo-edit 去增强。

#+begin_src shell
cargo install cargo-edit
#+end_src

之后我们就能像 npm 一样安装依赖了。

#+begin_src shell
cargo add rand
#+end_src

** 模块和权限控制

Rust 的模块系统非常的令人困惑，在单文件里面还算好理解，但分文件其实就挺麻烦的了，而官方也没有讲得十分清楚。

首先拿单文件举例。

#+begin_src rust
pub mod movies {
   pub fn play(name:String) {
      println!("Playing movie {}",name);
   }
}
fn main(){
   movies::play("Herold and Kumar".to_string());
}
#+end_src

#+RESULTS:
: Playing movie Herold and Kumar

默认权限为 private ，除非使用 =pub= 进行修饰。

*** 文件拆分模块

首先看一下文件结构。

#+begin_example
.
├── Cargo.toml
└── src
    ├── main.rs
    ├── movies
    │   └── comedy.rs
    └── movies.rs
#+end_example

我们有一个 module 和一个 submodule ， module 名字与文件名同名。

=main.rs=
#+begin_src rust
pub mod movies;

fn main() {
    movies::play("Herold and Kumar".to_string());
    movies::comedy::haha();
}
#+end_src

=movies.rs=
#+begin_src rust
pub mod comedy;

pub fn play(name: String) {
    println!("Playing movie {}", name);
}
#+end_src

=comedy.rs=
#+begin_src rust
pub fn haha() {
    println!("Hahahahaha!");
}
#+end_src

你可能还知道 =lib.rs= ，这个文件主要是库的入口，如果你不暴露作库的，可以不用这个。

** 常用的容器

主要是 vector 、 hashmap 和 hashset 。

*** vector

- 常用方法：

| 方法     | 作用           |
|----------+----------------|
| new      | 创建 vector    |
| push     | 追加元素到末尾 |
| remove   | 删除元素       |
| contains | 是否包含给定值 |
| len      | 使用大小       |

- 创建 vector ：

  #+begin_src rust
fn main() {
    let mut v = Vec::new();
    v.push(20);
    v.push(30);
    v.push(40);

    println!("size of vector is :{}", v.len());
    println!("{:?}", v);
}
  #+end_src

  #+RESULTS:
  : size of vector is :3
  : [20, 30, 40]

  我们也可以使用宏来创建。

  #+begin_src rust
fn main() {
    let v = vec![1, 2, 3, 4];
    println!("{:?}", v);
}
  #+end_src

  #+RESULTS:
  : [1, 2, 3, 4]

  注意， vector 不是元组，是列表，所以必须是相同类型。

 - 添加元素 - =push=

   这个上面演示了。

- 删除元素

  #+begin_src rust
fn main() {
    let mut v = vec![10, 20, 30];
    v.remove(1);
    println!("{:?}", v);
}
  #+end_src

  #+RESULTS:
  : [10, 30]

- 是否包含 - =contains=

  #+begin_src rust
fn main() {
   let v = vec![10,20,30];
   if v.contains(&10) {
      println!("found 10");
   }
   println!("{:?}",v);
}
  #+end_src

  #+RESULTS:
  : found 10
  : [10, 20, 30]

- 查看长度 - =len=

  #+begin_src rust
fn main() {
   let v = vec![1,2,3];
   println!("size of vector is :{}",v.len());
}
  #+end_src

- 遍历

  #+begin_src rust
fn main() {
   let mut v = Vec::new();
   v.push(20);
   v.push(30);
   v.push(40);
   v.push(500);

   for i in &v {
      println!("{}",i);
   }
   println!("{:?}",v);
}
  #+end_src

  #+RESULTS:
  : 20
  : 30
  : 40
  : 500
  : [20, 30, 40, 500]

*** hasmap

| 方法         | 作用                 |
|--------------+----------------------|
| insert       | 插入一对键值对       |
| len          | 返回容器中的元素数量 |
| get          | 获取元素             |
| iter         | 获取迭代器           |
| contains_key | 是否包含键值         |
| remove       | 移除一对键值对       |

- 插入

  #+begin_src rust
use std::collections::HashMap;

fn main() {
    let mut stateCodes = HashMap::new();
    stateCodes.insert("KL", "Kerala");
    println!("{:?}", stateCodes);
}
  #+end_src

  #+RESULTS:
  : {"KL": "Kerala"}

- len

  #+begin_src rust
use std::collections::HashMap;
fn main() {
   let mut stateCodes = HashMap::new();
   stateCodes.insert("KL","Kerala");
   stateCodes.insert("MH","Maharashtra");
   println!("size of map is {}",stateCodes.len());
}
  #+end_src

  #+RESULTS:
  : size of map is 2

- get

  #+begin_src rust
use std::collections::HashMap;
fn main() {
   let mut stateCodes = HashMap::new();
   stateCodes.insert("KL","Kerala");
   stateCodes.insert("MH","Maharashtra");
   println!("size of map is {}",stateCodes.len());
   println!("{:?}",stateCodes);

   match stateCodes.get(&"KL") {
      Some(value)=> {
         println!("Value for key KL is {}",value);
      }
      None => {
         println!("nothing found");
      }
   }
}
  #+end_src

  #+RESULTS:
  : size of map is 2
  : {"KL": "Kerala", "MH": "Maharashtra"}
  : Value for key KL is Kerala

- iter

  #+begin_src rust
use std::collections::HashMap;
fn main() {
   let mut stateCodes = HashMap::new();
   stateCodes.insert("KL","Kerala");
   stateCodes.insert("MH","Maharashtra");

   for (key, val) in stateCodes.iter() {
      println!("key: {} val: {}", key, val);
   }
}
  #+end_src

  #+RESULTS:
  : key: KL val: Kerala
  : key: MH val: Maharashtra

- contains_key

  #+begin_src rust
use std::collections::HashMap;
fn main() {
   let mut stateCodes = HashMap::new();
   stateCodes.insert("KL","Kerala");
   stateCodes.insert("MH","Maharashtra");
   stateCodes.insert("GJ","Gujarat");

   if stateCodes.contains_key(&"GJ") {
      println!("found key");
   }
}
  #+end_src

- remove

  #+begin_src rust
use std::collections::HashMap;
fn main() {
   let mut stateCodes = HashMap::new();
   stateCodes.insert("KL","Kerala");
   stateCodes.insert("MH","Maharashtra");
   stateCodes.insert("GJ","Gujarat");

   println!("length of the hashmap {}",stateCodes.len());
   stateCodes.remove(&"GJ");
   println!("length of the hashmap after remove() {}",stateCodes.len());
}
  #+end_src

*** HashSet

| 方法     | 作用           |
|----------+----------------|
| insert   | 插入值         |
| len      | 获取数量       |
| get      | 获取值的引用   |
| iter     | 迭代器         |
| contains | 查看值是否存在 |
| remove   | 删除值         |

- insert

  #+begin_src rust
use std::collections::HashSet;
fn main() {
   let mut names = HashSet::new();

   names.insert("Mohtashim");
   names.insert("Kannan");
   names.insert("TutorialsPoint");
   names.insert("Mohtashim");//duplicates not added

   println!("{:?}",names);
}
  #+end_src

  #+RESULTS:
  : {"Kannan", "TutorialsPoint", "Mohtashim"}

- len

  #+begin_src rust
use std::collections::HashSet;
fn main() {
   let mut names = HashSet::new();
   names.insert("Mohtashim");
   names.insert("Kannan");
   names.insert("TutorialsPoint");
   println!("size of the set is {}",names.len());
}
  #+end_src

  #+RESULTS:
  : size of the set is 3

- iter

  #+begin_src rust
use std::collections::HashSet;
fn main() {
   let mut names = HashSet::new();
   names.insert("Mohtashim");
   names.insert("Kannan");
   names.insert("TutorialsPoint");
   names.insert("Mohtashim");

   for name in names.iter() {
      println!("{}",name);
   }
}
  #+end_src

  #+RESULTS:
  : TutorialsPoint
  : Mohtashim
  : Kannan

- get

  #+begin_src rust
use std::collections::HashSet;
fn main() {
   let mut names = HashSet::new();
   names.insert("Mohtashim");
   names.insert("Kannan");
   names.insert("TutorialsPoint");
   names.insert("Mohtashim");

   match names.get(&"Mohtashim"){
      Some(value)=>{
         println!("found {}",value);
      }
      None =>{
         println!("not found");
      }
   }
   println!("{:?}",names);
}
  #+end_src

  #+RESULTS:
  : found Mohtashim
  : {"TutorialsPoint", "Mohtashim", "Kannan"}

- contains

  #+begin_src rust
use std::collections::HashSet;

fn main() {
   let mut names = HashSet::new();
   names.insert("Mohtashim");
   names.insert("Kannan");
   names.insert("TutorialsPoint");

   if names.contains(&"Kannan") {
      println!("found name");
   }
}
  #+end_src

  #+RESULTS:
  : found name

- remove

  #+begin_src rust
use std::collections::HashSet;

fn main() {
   let mut names = HashSet::new();
   names.insert("Mohtashim");
   names.insert("Kannan");
   names.insert("TutorialsPoint");
   println!("length of the Hashset: {}",names.len());
   names.remove(&"Kannan");
   println!("length of the Hashset after remove() : {}",names.len());
}
  #+end_src

  #+RESULTS:
  : length of the Hashset: 3
  : length of the Hashset after remove() : 2
** 错误处理

错误处理是 Rust 中非常重要的一环， Rust 的错误处理可分为可回事的错误处理和不可恢复的错误处理。

*** 不可恢复的错误处理 =panic!=

=panic!= 宏将会产生一个不可恢复的错误。

#+begin_src rust
fn main() {
    panic!("hello");
    println!("End of main"); // 实际上无法到达
}
#+end_src

#+begin_src rust
fn main() {
    let a = [10, 20, 30];
    a[10]; // 这里将会引发一个 panic
}
#+end_src

*** 可恢复的错误处理 =Result= 枚举

=Result= 是一个枚举泛型。

#+begin_src rust
enum Result<T, E> {
    OK(T),
    Err(E)
}
#+end_src

我们如何使用呢？

#+begin_src rust
use std::fs::File;

fn main() {
    let f = File::open("main.jpg"); // 返回的是一个 Result 类型
    // 一般使用类型匹配进行错误处理
    match f {
        Ok(f) => {
            println!("File found {:?}", f);
        },
        Err(e) => {
            println!("File not dound \n{:?}", e);
        }
    }
    println!("End of Main");
}
#+end_src

#+RESULTS:
: File not dound
: Os { code: 2, kind: NotFound, message: "No such file or directory" }
: End of Main
*** =unwrap= 和 =expect()=

标准库内一般常用的错误处理枚举类型为 =Result= 和 =Option= ，但每次写错误处理未免太过繁琐，而且一些情况下并不是很必要，所以就提供了两个辅助方法来简化书写。

| =unwrap= | 期待结果为 =Ok=/=Some= ，并返回包装在内的结果，如果为 =Err= 或者 =None= 则抛出 panic ，并将错误消息当作 panic 的内容。 |
| =expect= | 与 =unwrap= 行为类似，但会在 panic 前输出错误本身。                                                                    |

**** =unwrap()=

#+begin_src rust
fn is_even(no: i32) -> Result<bool, String> {
    if no % 2 == 0 {
        return Ok(true);
    }
    Err("NOT_AN_EVEN".to_string())
}

fn main() {
    let result = is_even(10).unwrap();
    println!("result is {}", result);
    println!("End of main");
}
#+end_src

#+RESULTS:
: result is true
: End of main

如果调用为 =is_even(9)= ，则结果为：

#+begin_example
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: "NOT_AN_EVEN"', fail.rs:9:29
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
#+end_example

**** =expect()=

#+begin_src rust
use std::fs::File;
fn main() {
    let f = File::open("pqr.txt").expect("File not able to open");
    println!("End of main");
}
#+end_src

#+RESULTS:
: thread 'main' panicked at 'File not able to open: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/main.rs:4:35

注意报错内容上两者的区别。

** 泛型

Rust 使用 =<T>= 语法来表示泛型。之前我们已经接触过一些泛型了，比如 =Vec= 、 =Result= 、 =Option= 等。

*** 泛型结构体

#+begin_src rust
struct Data<T> {
    value: T,
}

fn main() {
    let t: Data<i32> = Data{value: 350};
    println!("Value is :{}", t.value);
}
#+end_src

=<T>= 是泛型的类型参数语法，我们也可以实现多个参数的泛型语法。

如果我们不使用 =<T>= ，那就是简单的结构体声明。

*** Traits

trait 更类似于其他语言中的 interface 的概念。

#+begin_src rust
trait some_trait {
    fn method1(&self); // 抽象方法
    fn method2(&self); { // 默认实现
        // some code
    }
}
#+end_src

Result 的 trait 可以声明默认方法。

**** implement 一个 trait

#+begin_src rust
impl some_trait for struct_name {
    fn method1(&self) {}
}
#+end_src

**** 泛型函数

该示例定义了一个通用函数，该函数显示传递给它的参数。 参数可以是任何类型。 参数的类型应该实现 =Display= trait，以便它的值可以被 =println!= 宏打印出来。

#+begin_src rust
use std::fmt::Display;

fn print_pro<T: Display>(t: T) {
    println!("Inside print_pro generic function.");
    println!("{}", t);
}

fn main() {
    print_pro(10 as u8);
    print_pro(20 as u8);
    print_pro("Hello TutorialsPoint");
}
#+end_src

#+RESULTS:
: Inside print_pro generic function.
: 10
: Inside print_pro generic function.
: 20
: Inside print_pro generic function.
: Hello TutorialsPoint

** 输入输出

*** 标准输入输出

- 标准输入

  #+begin_src rust
fn main() {
    let mut line = String::new();
    println!("Enter your name: ");
    let b1 = std::io::stdin().read_line(&mut line).unwrap();
    println!("Hello, {}", line);
    println!("no of bytes read, {}", b1);
}
  #+end_src

- 标准输出

  #+begin_src rust
use std::io::Write;
fn main() {
    std::io::stdout().write("Tutorials".as_bytes()).unwrap();
}
  #+end_src

  #+RESULTS:
  : Tutorials
*** 命令行参数

#+begin_src rust
fn main() {
    let cmd_line = std::env::args();
    println!("No of elements in arguments is :{}", cmd_line.len());
    for arg in cmd_line {
        println!("[{}]", arg);
    }
}
#+end_src

#+RESULTS:
: No of elements in arguments is :1
: [target/debug/cargoA1P7Q7]
*** 文件输入输出

- 写入文件

  #+begin_src rust
use std::io::Write;

fn main() {
    let mut file = std::fs::File::create("data.text").expect("create failed");
    file.write_all("Hello World".as_bytes()).expect("write failed");
    file.write_all("\nTutorialPoint".as_bytes().expect("write failed"));
    println!("data written to file");
}
  #+end_src

- 读取文件

  #+begin_src rust
use std::io::Read;

fn main() {
    let mut file = std::fs::File::open("data.txt").unwrap();
    let mut contents = String::new();
    file.read_to_string(&mut contents).unwrap();
    print!("{}", contents);
}
  #+end_src

- 删除文件

  #+begin_src rust
use std::fs;

fn main() {
    fs.remove_file("data.txt").expect("could not remove file");
    println!("file is removed");
}
  #+end_src

- 追加文件数据

  #+begin_src rust
use std::fs::OpenOptions;
use std::io:Write;

fn main() {
    let mut file = OpenOptions::new().append(true).open("data.txt").expect("cannot open file");
    file.write_all("Hello World".as_bytes()).expect("write failed");
    file.write_all("\nTutorialPoint".as_bytes().expect("write failed"));
    println!("file append success");
}
  #+end_src

- 复制文件

  #+begin_src rust
use std::io::Read;
use std::io::Write;

fn main() {
    let mut command_line: std::env::Args = std::env::args();
    command_line.next().unwrap();
    let source = command_line.next().unwrap();
    let mut file_in = std::fs::File::open(source).unwrap();
    let mut file_out = std::fs::File::create(destination).unwrap();
    let mut buffer = [0u8; 4096];
    loop {
        let nbytes = file_in.read(&mut buffer).unwrap();
        file_out.write(&buffer[..nbytes]).unwrap();
        if nbytes < buffer.len() { break; }
    }
}
  #+end_src


** 迭代器

- 如何使用迭代器

  #+begin_src rust
fn main() {
    let a = [10, 20, 30];
    let mut iter = a.iter();
    println!("{:?}", iter);
    println!("{:?}", iter.next());
    println!("{:?}", iter.next());
    println!("{:?}", iter.next());
    println!("{:?}", iter.next());
}
  #+end_src

  #+RESULTS:
  : Iter([10, 20, 30])
  : Some(10)
  : Some(20)
  : Some(30)
  : None

  如果一个集合是数组或者 vector 的迭代器，我们可以使用 =for...in= 。

  #+begin_src rust
fn main() {
    let a = [10, 20, 30];
    let iter = a.iter();
    for data in iter {
        print!("{}\t", data);
    }
}
  #+end_src

  #+RESULTS:
  : 10	20	30

- 迭代器内的方法

 | 方法        | 描述         |
 |-------------+--------------|
 | iter()      | 返回 &T      |
 | into_iter() | 返回值类型 T |
 | iter_mut()  | 返回 &mut T  |

** 闭包

- 闭包语法

  #+begin_src rust
let closure_function = |param| {
    // logic
}
closure_function(param);
  #+end_src

使用例：

#+begin_src rust
fn main() {
    let is_even = | x | {
        x % 2 == 0
    };
    let no = 13;
    println!("{} is even ? {}", no, is_even(no));
}
#+end_src

#+RESULTS:
: 13 is even ? false
